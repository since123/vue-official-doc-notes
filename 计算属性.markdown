### 计算属性缓存 vs 方法

计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值
官方文档给了一个很好的例子,下面的计算属性将不再更新，只会在进入页面时计算一次，因为 Date.now() 不是响应式依赖，通俗理解，vue的data里面定义的才算是响应式的属性，而计算属性里面的值如果是基于这些响应式的属性得出得结果才会在每次页面刷新得时候判断更不更新，更新的条件就是这些响应式依赖有没有变化，如果有变化就更新，即重新计算，如果没有变化就不更新，故，Date.now()不是响应式依赖，自然不会再更新now了，
```js
computed: {
  now: function () {
    return Date.now()
  }
}
```

### 侦听器
* 记忆点1： 

    `_.debounce` 是一个通过 Lodash 限制操作频率的函数。

    `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，

    请参考：https://lodash.com/docs#debounce

    引入方法：
```js
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"></script>
```
使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。

除了 watch 选项之外，您还可以使用命令式的 vm.$watch API。

